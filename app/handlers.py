import app.keyboards as kb
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, command
import sqlite3
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

router = Router()


class User_states(StatesGroup):
    no_reg = State()
    reg = State()
    full_name = State()
    exam_scores = State()
    snils = State()
    docs = State()
    choice_institute = State()
    choice_direction = State()
    list_contains = State()
    change_snils = State()
    change_full_name = State()
    change_scores = State()











# –ù–∞—á–∞–ª–æ, –∫–æ–º–∞–Ω–¥–∞ –°–¢–ê–†–¢
@router.message(CommandStart(), User_states.reg)
async def start(message: Message, state: FSMContext):
    await state.set_state(User_states.no_reg)
    await message.answer(
                        "–ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω–∫—É—Ä—Å–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –°–§–£. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.", reply_markup=kb.start_reg)

# –ö–æ–º–∞–Ω–¥–∞ –°–¢–ê–†–¢ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# @router.message(CommandStart(), User_states.reg)
# async def start_menu(message: Message):
#     await message.answer(
#         "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö <i>–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£</i>, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n",
#         reply_markup=kb.menu, parse_mode='html')

"""–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–ê"""

# –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ –∫–Ω–æ–ø–∫–µ
@router.message(F.text == 'üõ† –í—ã–≤–µ—Å—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', User_states.reg)
async def menu(message: Message):
    await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö <i>–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£</i>, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n",
                         reply_markup=kb.menu, parse_mode='html')
# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
@router.message(F.text == 'üë®‚Äçüíª –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ')
async def watch_data(message: Message, state: FSMContext):
    user_data = await state.get_data()
    full_name = user_data['full_name']
    snils = user_data['snils']
    exam_scores = user_data['exam_scores']
    await message.answer(f'<b>–í–∞—à–µ –§–ò–û:</b> {full_name}\n<b>–í–∞—à –Ω–æ–º–µ—Ä –°–ù–ò–õ–°:</b> {snils}\n<b>–í–∞—à–∏ –ë–∞–ª–ª—ã –ï–ì–≠:</b> {exam_scores}', parse_mode='html')

# –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å\n–°–ù–ò–õ–°')
async def change_snils_start(message: Message, state: FSMContext):
    await state.set_state(User_states.change_snils)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –°–ù–ò–õ–°')
@router.message(User_states.change_snils)
async def change_snils(message: Message, state: FSMContext):
    await state.set_state(User_states.reg)
    await state.update_data(snils=message.text)
    await message.answer('–ì–æ—Ç–æ–≤–æ!')

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å\n–§–ò–û')
async def change_full_name_start(message: Message, state: FSMContext):
    await state.set_state(User_states.change_full_name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û')
@router.message(User_states.change_full_name)
async def change_full_name(message: Message, state: FSMContext):
    await state.set_state(User_states.reg)
    await state.update_data(full_name=message.text)
    await message.answer('–ì–æ—Ç–æ–≤–æ!')

@router.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å\n–±–∞–ª–ª—ã –ï–ì–≠')
async def change_scores_start(message: Message, state: FSMContext):
    await state.set_state(User_states.change_scores)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ï–ì–≠')
@router.message(User_states.change_scores)
async def change_scores(message: Message, state: FSMContext):
    await state.set_state(User_states.reg)
    await state.update_data(exam_scores=message.text)
    await message.answer('–ì–æ—Ç–æ–≤–æ!')


"""CALLBACK_DATA"""
# –ù–∞—á–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == 'reg', User_states.no_reg)
async def reg(callback: CallbackQuery, state: FSMContext):
    await state.set_state(User_states.full_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û')
@router.message(User_states.full_name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(User_states.exam_scores)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ï–ì–≠')
@router.message(User_states.exam_scores)
async def register_scores(message: Message, state: FSMContext):
    await state.update_data(exam_scores=int(message.text))
    await state.set_state(User_states.snils)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –°–ù–ò–õ–°')
@router.message(User_states.snils)
async def register_snils(message: Message, state: FSMContext):
    await state.update_data(snils=message.text)
    await state.update_data(no_reg=False)
    await state.update_data(docs=False)
    await state.update_data(list_contains=False)
    await state.set_state(User_states.reg)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.open_menu)

# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∞—á–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞
@router.callback_query(F.data == 'docs', User_states.reg)
async def docs(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if user_data['docs'] == False:
        await state.update_data(docs=True)
        await callback.answer('–†–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞: ‚úÖ')
        await callback.message.answer('–†–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞: ‚úÖ')
    if user_data['docs'] == True:
        await state.update_data(docs=False)
        await callback.answer('–†–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞: üö´')
        await callback.message.answer('–†–µ–∂–∏–º –ø–æ–¥–∞—á–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞: üö´')

# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ—Å—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
@router.callback_query(F.data == 'place', User_states.reg)
async def get_place_choice_institute(callback: CallbackQuery, state: FSMContext):
    await state.set_state(User_states.choice_institute)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç", reply_markup=kb.institutes)
    await callback.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç')
    """–ò–Ω—Å—Ç–∏—Ç—É—Ç—ã –∏ –∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
# –ì–ò
@router.message(F.text == '–ì–ò', User_states.choice_institute)
async def get_place_choice_direction(message: Message, state: FSMContext):
    await state.set_state(User_states.choice_direction)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=kb.directions_GI)

@router.message(F.text == '–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', User_states.choice_direction)
async def get_place(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.set_state(User_states.reg)
    place = 0
    _names = user_data["full_name"]
    snils = user_data["snils"]
    exam_scores = user_data["exam_scores"]
    list_contains = user_data["list_contains"]
    connection = sqlite3.connect('applicants_of_AppInformatics.db')
    cursor = connection.cursor()
    cursor.execute("""SELECT *
                      FROM Applied_Informatics""")
    connection.commit()
    for rec in cursor:
        if str(rec[2]) == str(_names) and str(rec[3]) == str(snils):
            list_contains = True
            break
    if user_data["docs"] == False and list_contains == True:
        cursor.execute("""SELECT full_name, snils, exam_scores
                          FROM Applied_Informatics
                          ORDER BY exam_scores
                          DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
    if list_contains == False:
        await message.answer('<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ.\n–ï—Å–ª–∏ –≤—Å—ë –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∑–≤–æ–Ω–∏–≤ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>', reply_markup=kb.open_menu, parse_mode='html')
    if user_data["docs"] == True and list_contains == True:
        connection = sqlite3.connect('applicants_of_AppInformatics.db')
        cursor = connection.cursor()
        count_recs = int(list(cursor.execute("SELECT count (*) FROM Applied_Informatics"))[0][0])
        applicant_user = [count_recs+1, True, _names, snils, exam_scores]
        cursor.execute("INSERT OR IGNORE INTO Applied_Informatics VALUES(?,?,?,?,?);", applicant_user)
        connection.commit()
        cursor.execute("""SELECT full_name, snils, exam_scores
                                  FROM Applied_Informatics
                                  WHERE certificate = True
                                  ORDER BY exam_scores
                                  DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
        cursor.execute(f"DELETE FROM Applied_Informatics WHERE full_name=? AND certificate=?", (str(_names), 1))
        connection.commit()
@router.message(F.text == "–†–µ–ª–∏–≥–∏–æ–≤–µ–¥–µ–Ω–∏–µ", User_states.choice_direction)
async def get_place(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.set_state(User_states.reg)
    place = 0
    _names = user_data["full_name"]
    snils = user_data["snils"]
    exam_scores = user_data["exam_scores"]
    list_contains = user_data["list_contains"]
    connection = sqlite3.connect('applicants_of_Religious_studies.db')
    cursor = connection.cursor()
    cursor.execute("""SELECT *
                      FROM Religious_studies""")
    connection.commit()
    for rec in cursor:
        if str(rec[2]) == str(_names) and str(rec[3]) == str(snils):
            list_contains = True
            break
    if user_data["docs"] == False and list_contains == True:
        cursor.execute("""SELECT full_name, snils, exam_scores
                              FROM Religious_studies
                              ORDER BY exam_scores
                              DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
    if list_contains == False:
        await message.answer(
            '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ.\n–ï—Å–ª–∏ –≤—Å—ë –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∑–≤–æ–Ω–∏–≤ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
            reply_markup=kb.open_menu, parse_mode='html')
    if user_data["docs"] == True and list_contains == True:
        count_recs = int(list(cursor.execute("SELECT count (*) FROM Religious_studies"))[0][0])
        applicant_user = [count_recs + 1, True, _names, snils, exam_scores]
        cursor.execute("INSERT OR IGNORE INTO Religious_studies VALUES(?,?,?,?,?);", applicant_user)
        connection.commit()
        cursor.execute("""SELECT full_name, snils, exam_scores
                                      FROM Religious_studies
                                      WHERE certificate = True
                                      ORDER BY exam_scores
                                      DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
        cursor.execute(f"DELETE FROM Religious_studies WHERE full_name=? AND certificate=?", (str(_names), 1))
        connection.commit()






# –ò–ö–ò–¢
@router.message(F.text == '–ò–ö–ò–¢', User_states.choice_institute)
async def get_place_choice_direction(message: Message, state: FSMContext):
    await state.set_state(User_states.choice_direction)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', reply_markup=kb.directions_IKIT)
@router.message(F.text == '–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', User_states.choice_direction)
async def get_place(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.set_state(User_states.reg)
    place = 0
    _names = user_data["full_name"]
    snils = user_data["snils"]
    exam_scores = user_data["exam_scores"]
    list_contains = user_data["list_contains"]
    connection = sqlite3.connect('applicants_of_AppInformatics.db')
    cursor = connection.cursor()
    cursor.execute("""SELECT *
                      FROM Applied_Informatics""")
    connection.commit()
    for rec in cursor:
        if str(rec[2]) == str(_names) and str(rec[3]) == str(snils):
            list_contains = True
            break
    if user_data["docs"] == False and list_contains == True:
        cursor.execute("""SELECT full_name, snils, exam_scores
                          FROM Applied_Informatics
                          ORDER BY exam_scores
                          DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
    if list_contains == False:
        await message.answer('<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ.\n–ï—Å–ª–∏ –≤—Å—ë –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∑–≤–æ–Ω–∏–≤ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>', reply_markup=kb.open_menu, parse_mode='html')
    if user_data["docs"] == True and list_contains == True:
        connection = sqlite3.connect('applicants_of_AppInformatics.db')
        cursor = connection.cursor()
        count_recs = int(list(cursor.execute("SELECT count (*) FROM Applied_Informatics"))[0][0])
        applicant_user = [count_recs+1, True, _names, snils, exam_scores]
        cursor.execute("INSERT OR IGNORE INTO Applied_Informatics VALUES(?,?,?,?,?);", applicant_user)
        connection.commit()
        cursor.execute("""SELECT full_name, snils, exam_scores
                                  FROM Applied_Informatics
                                  WHERE certificate = True
                                  ORDER BY exam_scores
                                  DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
        cursor.execute(f"DELETE FROM Applied_Informatics WHERE full_name=? AND certificate=?", (str(_names), 1))
        connection.commit()
@router.message(F.text == "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è", User_states.choice_direction)
async def get_place(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await state.set_state(User_states.reg)
    place = 0
    _names = user_data["full_name"]
    snils = user_data["snils"]
    exam_scores = user_data["exam_scores"]
    list_contains = user_data["list_contains"]
    connection = sqlite3.connect('applicants_of_SoftEngineering.db')
    cursor = connection.cursor()
    cursor.execute("""SELECT *
                          FROM Software_Engineering""")
    connection.commit()
    for rec in cursor:
        if str(rec[2]) == str(_names) and str(rec[3]) == str(snils):
            list_contains = True
            break
    if user_data["docs"] == False and list_contains == True:
        cursor.execute("""SELECT full_name, snils, exam_scores
                              FROM Software_Engineering
                              ORDER BY exam_scores
                              DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
    if list_contains == False:
        await message.answer(
            '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç–µ.\n–ï—Å–ª–∏ –≤—Å—ë –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∑–≤–æ–Ω–∏–≤ –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
            reply_markup=kb.open_menu, parse_mode='html')
    if user_data["docs"] == True and list_contains == True:
        count_recs = int(list(cursor.execute("SELECT count (*) FROM Software_Engineering"))[0][0])
        applicant_user = [count_recs + 1, True, _names, snils, exam_scores]
        cursor.execute("INSERT OR IGNORE INTO Software_Engineering VALUES(?,?,?,?,?);", applicant_user)
        connection.commit()
        cursor.execute("""SELECT full_name, snils, exam_scores
                                      FROM Software_Engineering
                                      WHERE certificate = True
                                      ORDER BY exam_scores
                                      DESC""")
        connection.commit()
        for rec in cursor:
            place += 1
            if str(rec[0]) == str(_names) and str(rec[1]) == str(snils) and str(rec[2]) == str(exam_scores):
                await message.answer(f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=kb.open_menu)
                break
        cursor.execute(f"DELETE FROM Software_Engineering WHERE full_name=? AND certificate=?", (str(_names), 1))
        connection.commit()





















# async def callback_message(callback):
#
#     if callback.data == 'reg':
#         main_message = callback.message
#         await bot.send_message(main_message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
#         await bot.register_next_step_handler(main_message, reg2)
#
#     if callback.data == 'menu':
#         main_message = callback.message
#         markup = types.InlineKeyboardMarkup()
#         markup.add(types.InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤", callback_data='place'))
#         markup.add(types.InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç", callback_data='docs'))
#         markup.add(types.InlineKeyboardButton("‚öô –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", url='https://abiturient.sfu-kras.ru'))
#         markup.add(
#             types.InlineKeyboardButton(f"üêø –ì—Ä—É–ø–ø–∞ –≤ –í–ö {"–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£"}", url='https://vk.com/dovuz_sfu?from=search'))
#         await bot.send_message(main_message.chat.id,
#                          "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n",
#                          reply_markup=markup, parse_mode='html')
#
#     global docs
#     global full_name
#     if callback.data == 'docs':
#         if docs == True:
#             docs = False
#             await bot.send_message(callback.message.chat.id, '<b>–ü–æ–∑–∏—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞:</b> –ê—Ç—Ç–µ—Å—Ç–∞—Ç –Ω–µ –ø–æ–¥–∞–Ω!', parse_mode='html')
#         else:
#             docs = True
#             await bot.send_message(callback.message.chat.id, '<b>–ü–æ–∑–∏—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞:</b> –ê—Ç—Ç–µ—Å—Ç–∞—Ç –ø–æ–¥–∞–Ω!', parse_mode='html')
#
#
#     if callback.data == 'place':
#         main_message = callback.message
#         global snils
#         markup = types.ReplyKeyboardMarkup()
#         institutes = ['–ò–ö–ò–¢']
#         for mark in institutes:
#             markup.add(types.KeyboardButton(f"{mark}"))
#         await bot.send_message(main_message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç", reply_markup=markup)
#         await bot.register_next_step_handler(main_message, place1)
#
#
#
#
# async def reg2(message):
#     global full_name
#     full_name = message.text.strip()
#     await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–°")
#     await bot.register_next_step_handler(message, reg3)
#
# async def reg3(message):  # –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#     global snils
#     global registration
#     snils = message.text.strip()
#     connection = sqlite3.connect("Users.db")  # –∑–∞–ø–∏—Å—å –≤ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π
#     curse = connection.cursor()
#     userNote = [full_name, snils]
#     curse.execute("INSERT OR IGNORE INTO Users  VALUES (?,?)", userNote)
#     connection.commit()
#     curse.close
#     connection.close
#     registration = True
#
#     markup = types.InlineKeyboardMarkup()
#     markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data= 'menu'))
#     await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ,–≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
#                      reply_markup=markup)
# async def place1(message):
#     if message.text.lower() == '–∏–∫–∏—Ç':
#         directions = ['–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']
#         markup = types.ReplyKeyboardMarkup()
#         for mark in directions:
#             markup.add(types.KeyboardButton(f'{mark}'))
#         await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=markup)
#         await bot.register_next_step_handler(message, place2)
# async def place2(message):
#     if message.text.lower() == '–ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞':
#         place = 0
#         check = False
#         if docs == False:
#             connection = sqlite3.connect('applicants_of_AppInformatics.db')
#             cursor = connection.cursor()
#             cursor.execute("""SELECT full_name, snils, exam_scores
#                                      FROM Applied_Informatics
#                                      ORDER BY exam_scores
#                                      DESC""")
#             connection.commit()
#             for rec in cursor:
#                 place += 1
#                 if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
#                     check = True
#                     markup = types.InlineKeyboardMarkup()
#                     markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                     await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
#                     break
#             if check == False:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                 await bot.send_message(message.chat.id, '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>', reply_markup=markup, parse_mode='html')
#
#
#         else:
#             connection = sqlite3.connect('applicants_of_AppInformatics.db')
#             cursor = connection.cursor()
#             cursor.execute("""SELECT full_name, snils, exam_scores
#                               FROM Applied_Informatics
#                               WHERE certificate = true
#                               ORDER BY exam_scores
#                               DESC""")
#             connection.commit()
#             for rec in cursor:
#                 place += 1
#                 if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
#                     check = True
#                     markup = types.InlineKeyboardMarkup()
#                     markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                     await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
#                     break
#             if check == False:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                 await bot.send_message(message.chat.id,
#                                  '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
#                                  reply_markup=markup, parse_mode = 'html')
#
#
#     if message.text.lower() == '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è':
#         place = 0
#         check = False
#         if docs == False:
#             connection = sqlite3.connect('applicants_of_SoftEngineering.db')
#             cursor = connection.cursor()
#             cursor.execute("""SELECT full_name, snils, exam_scores
#                               FROM Software_Engineering
#                               ORDER BY exam_scores
#                               DESC""")
#             connection.commit()
#             for rec in cursor:
#                 place += 1
#                 if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
#                     check = True
#                     markup = types.InlineKeyboardMarkup()
#                     markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                     await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
#                     break
#             if check == False:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                 await bot.send_message(message.chat.id,
#                                         '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
#                                          reply_markup=markup, parse_mode='html')
#
#
#         else:
#             connection = sqlite3.connect('applicants_of_SoftEngineering.db')
#             cursor = connection.cursor()
#             cursor.execute("""SELECT full_name, snils, exam_scores
#                               FROM Software_Engineering
#                               WHERE certificate = true
#                               ORDER BY exam_scores
#                               DESC""")
#             connection.commit()
#             for rec in cursor:
#                 place += 1
#                 if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
#                     check = True
#                     markup = types.InlineKeyboardMarkup()
#                     markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                     await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
#                     break
#             if check == False:
#                 markup = types.InlineKeyboardMarkup()
#                 markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
#                 await bot.send_message(message.chat.id,
#                                          '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
#                                          reply_markup=markup, parse_mode='html')