from aiogram import Bot, Dispatcher, types
from aiogram import executor
import sqlite3
from telebot import types
from time import sleep






registration = False
docs = False
full_name = None
snils = None


bot = Bot('7006292589:AAFikVQR1SSuXX5RsHxmWrYba3tgpHc265M')
dp = Dispatcher(bot)







@dp.message_handler(commands = ['start'])
async def start(message):
    if registration == True:
        await bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Abit-SFU, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –°–§–£.")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤", callback_data='place'))
        markup.add(types.InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç", callback_data='docs'))
        markup.add(types.InlineKeyboardButton("‚öô –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", url='https://abiturient.sfu-kras.ru'))
        markup.add(types.InlineKeyboardButton(f"üêø –ì—Ä—É–ø–ø–∞ –≤ –í–ö {"–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£"}", url='https://vk.com/dovuz_sfu?from=search'))
        await bot.send_message(message.chat.id, "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n", reply_markup=markup, parse_mode='html')
    if registration == False:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('üöÄ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='reg'))
        await bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Abit-SFU, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å–ø–∏—Å–∫–∞—Ö –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –°–§–£. –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.", reply_markup=markup)



@dp.message_handler()
async def menu(message):
    if message.text.lower() == '–æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤", callback_data='place'))
        markup.add(types.InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç", callback_data='docs'))
        markup.add(types.InlineKeyboardButton("‚öô –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", url='https://abiturient.sfu-kras.ru'))
        markup.add(types.InlineKeyboardButton(f"üêø –ì—Ä—É–ø–ø–∞ –≤ –í–ö {"–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£"}", url='https://vk.com/dovuz_sfu?from=search'))
        await bot.send_message(message.chat.id,
                         "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n",
                         reply_markup=markup, parse_mode='html')


@dp.callback_query_handler(func=lambda callback: True)


async def callback_message(callback):

    if callback.data == 'reg':
        main_message = callback.message
        await bot.send_message(main_message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
        await bot.register_next_step_handler(main_message, reg2)

    if callback.data == 'menu':
        main_message = callback.message
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìç –ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤", callback_data='place'))
        markup.add(types.InlineKeyboardButton("üìù –ü–æ–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç", callback_data='docs'))
        markup.add(types.InlineKeyboardButton("‚öô –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç", url='https://abiturient.sfu-kras.ru'))
        markup.add(
            types.InlineKeyboardButton(f"üêø –ì—Ä—É–ø–ø–∞ –≤ –í–ö {"–ü–æ—Å—Ç—É–ø–∞–π –≤ –°–§–£"}", url='https://vk.com/dovuz_sfu?from=search'))
        await bot.send_message(main_message.chat.id,
                         "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!\n\n –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ú–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤</b>\n\n –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ç –≤ –°–§–£, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ <b>–ü–æ–¥–∞—Ç—å –∞—Ç—Ç–µ—Å—Ç–∞—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç, –Ω–∞–∂–º–∏—Ç–µ <b>–ê–ò–° –ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç</b>\n\n –ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É –≤ –í–ö, –Ω–∞–∂–º–∏—Ç–µ <b>–ì—Ä—É–ø–ø–∞ –≤ –í–ö</b>\n\n",
                         reply_markup=markup, parse_mode='html')

    global docs
    global full_name
    if callback.data == 'docs':
        if docs == True:
            docs = False
            await bot.send_message(callback.message.chat.id, '<b>–ü–æ–∑–∏—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞:</b> –ê—Ç—Ç–µ—Å—Ç–∞—Ç –Ω–µ –ø–æ–¥–∞–Ω!', parse_mode='html')
        else:
            docs = True
            await bot.send_message(callback.message.chat.id, '<b>–ü–æ–∑–∏—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ç–∞:</b> –ê—Ç—Ç–µ—Å—Ç–∞—Ç –ø–æ–¥–∞–Ω!', parse_mode='html')


    if callback.data == 'place':
        main_message = callback.message
        global snils
        markup = types.ReplyKeyboardMarkup()
        institutes = ['–ò–ö–ò–¢']
        for mark in institutes:
            markup.add(types.KeyboardButton(f"{mark}"))
        await bot.send_message(main_message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç", reply_markup=markup)
        await bot.register_next_step_handler(main_message, place1)




async def reg2(message):
    global full_name
    full_name = message.text.strip()
    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–°")
    await bot.register_next_step_handler(message, reg3)

async def reg3(message):  # –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    global snils
    global registration
    snils = message.text.strip()
    connection = sqlite3.connect("Users.db")  # –∑–∞–ø–∏—Å—å –≤ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–π
    curse = connection.cursor()
    userNote = [full_name, snils]
    curse.execute("INSERT OR IGNORE INTO Users  VALUES (?,?)", userNote)
    connection.commit()
    curse.close
    connection.close
    registration = True

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data= 'menu'))
    await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ,–≤—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –æ—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                     reply_markup=markup)
async def place1(message):
    if message.text.lower() == '–∏–∫–∏—Ç':
        directions = ['–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è']
        markup = types.ReplyKeyboardMarkup()
        for mark in directions:
            markup.add(types.KeyboardButton(f'{mark}'))
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", reply_markup=markup)
        await bot.register_next_step_handler(message, place2)
async def place2(message):
    if message.text.lower() == '–ø—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞':
        place = 0
        check = False
        if docs == False:
            connection = sqlite3.connect('applicants_of_AppInformatics.db')
            cursor = connection.cursor()
            cursor.execute("""SELECT full_name, snils, exam_scores
                                     FROM Applied_Informatics
                                     ORDER BY exam_scores
                                     DESC""")
            connection.commit()
            for rec in cursor:
                place += 1
                if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
                    check = True
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                    await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
                    break
            if check == False:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                await bot.send_message(message.chat.id, '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>', reply_markup=markup, parse_mode='html')


        else:
            connection = sqlite3.connect('applicants_of_AppInformatics.db')
            cursor = connection.cursor()
            cursor.execute("""SELECT full_name, snils, exam_scores
                              FROM Applied_Informatics
                              WHERE certificate = true
                              ORDER BY exam_scores
                              DESC""")
            connection.commit()
            for rec in cursor:
                place += 1
                if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
                    check = True
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                    await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
                    break
            if check == False:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                await bot.send_message(message.chat.id,
                                 '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
                                 reply_markup=markup, parse_mode = 'html')


    if message.text.lower() == '–ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è':
        place = 0
        check = False
        if docs == False:
            connection = sqlite3.connect('applicants_of_SoftEngineering.db')
            cursor = connection.cursor()
            cursor.execute("""SELECT full_name, snils, exam_scores
                              FROM Software_Engineering
                              ORDER BY exam_scores
                              DESC""")
            connection.commit()
            for rec in cursor:
                place += 1
                if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
                    check = True
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                    await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
                    break
            if check == False:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                await bot.send_message(message.chat.id,
                                        '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
                                         reply_markup=markup, parse_mode='html')


        else:
            connection = sqlite3.connect('applicants_of_SoftEngineering.db')
            cursor = connection.cursor()
            cursor.execute("""SELECT full_name, snils, exam_scores
                              FROM Software_Engineering
                              WHERE certificate = true
                              ORDER BY exam_scores
                              DESC""")
            connection.commit()
            for rec in cursor:
                place += 1
                if str(rec[0]) == str(full_name) and str(rec[1]) == str(snils):
                    check = True
                    markup = types.InlineKeyboardMarkup()
                    markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                    await bot.send_message(message.chat.id, f'–¢–≤–æ—ë –º–µ—Å—Ç–æ –≤ —Å–ø–∏—Å–∫–µ: {place}', reply_markup=markup)
                    break
            if check == False:
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
                await bot.send_message(message.chat.id,
                                         '<b>–í–∞—Å –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö!</b>\n–ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–≤–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –°–§–£, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—Ç—å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–∏—ë–º–Ω—É—é –∫–æ–º–∏—Å—Å–∏—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n<i><b>8 800 550-22-24</b></i>',
                                         reply_markup=markup, parse_mode='html')






while True:
    try:
        bot.polling(none_stop=True)
    except Exception as _ex:
        print(_ex)
        sleep(15)

"""bot.polling(none_stop = True)"""